# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, modulesPath, inputs, ... }:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
    inputs.nixos-hardware.nixosModules.tuxedo-infinitybook-pro14-gen7
  ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/7cdc8f6e-1d4a-47a3-9356-c1efacba7d60";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/19B1-BD75";
    fsType = "vfat";
  };

  swapDevices =
    [{ device = "/dev/disk/by-uuid/967e7421-dd9c-4163-b3e8-a1b5c619909a"; }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s20f0u1u4.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;
  services.hardware.bolt.enable = lib.mkDefault true;
  hardware.tuxedo-rs = {
    enable = lib.mkDefault true;
    tailor-gui.enable = true;
  };
  # hardware.tuxedo-drivers.enable = lib.mkForce false;
}
